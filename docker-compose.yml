services:

  flightradar-api:
    container_name: flightradar-api
    build:
      context: ./flightradar-api-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '8000:8000'

  avgeek-telegram-bot:
    container_name: avgeek-telegram-bot
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8080:8080'
    depends_on:
      bot-admin-panel:
        condition: service_started

  bot-admin-panel:
    container_name: bot-admin-panel
    build:
      context: ./bot-admin-panel
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8888:8888'
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      flightradar-api:
        condition: service_started

  postgres:
    container_name: avgeek_bot_postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
    volumes:
      - postgres_storage:/data/postgres
    ports:
      - '5433:5432'

  rabbitmq:
    container_name: avgeek-rabbitmq
    image: rabbitmq:latest
    ports:
      - '5672:5672'
      - '15762:15762'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_storage:/data/rabbitmq

volumes:
  postgres_storage:
  rabbitmq_storage: