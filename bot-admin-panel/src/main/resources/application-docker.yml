spring:
  application:
    name: bot-admin-panel

  security:
    user:
      name: ${ADMIN_USERNAME}
      password: ${ADMIN_PASSWORD}

  boot:
    admin:
      client:
        url: ${ADMIN_SERVER_URL}
        username: ${spring.security.user.name}
        password: ${spring.security.user.password}
        instance:
          metadata:
            user:
              name: ${spring.security.user.name}
              password: ${spring.security.user.password}

      ui:
        brand: "<img src='assets/img/logo.png'><span>Avgeek Telegram Bot Admin</span>"
        login-icon: 'assets/img/logo.png'
        favicon: 'assets/img/logo.png'
        title: Avgeek Bot Admin Panel
        external-views:
          - label: Users
            url: ${APPLICATION_HOST}/users
          - label: Github
            url: ${GITHUB_REPOSITORY_URL}

  jpa:
    hibernate:
      ddl-auto: none

  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_DOCKER_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

  data:
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      database: ${MONGO_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      authentication-database: admin

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

logging:
  pattern:
    dateformat: 'HH:mm:ss-dd.MM.yyyy'
  file:
    name: bot-admin-panel.log

rabbitmq:
  username: ${RABBITMQ_USERNAME}
  password: ${RABBITMQ_PASSWORD}
  connection-host: ${RABBITMQ_DOCKER_HOST}
  feedback-queue: feedback-queue
  users-statistic-queue: users-statistic-queue
  notification-queue: notification-queue

github:
  repository-link: ${GITHUB_REPOSITORY_URL}

server:
  port: 8888
